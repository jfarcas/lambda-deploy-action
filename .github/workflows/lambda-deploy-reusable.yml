name: 'Reusable Lambda Deploy Workflow'

# Dynamic run name showing deployment context
run-name: >-
  ${{
    github.event_name == 'workflow_dispatch' && 
    format('🚀 Manual Deploy to {0} | {1} | {2}', 
      inputs.environment || 'auto', 
      inputs.version || 'auto-version',
      github.event.head_commit.message || github.ref_name
    ) ||
    github.event_name == 'push' &&
    format('📦 Push Deploy | {0} | {1}',
      github.ref_name,
      github.event.head_commit.message
    ) ||
    github.event_name == 'pull_request' &&
    format('🔍 PR Deploy | #{0} | {1}',
      github.event.number,
      github.event.pull_request.title
    ) ||
    format('🔄 Deploy | {0} | {1}',
      github.ref_name,
      github.sha
    )
  }}

on:
  workflow_call:
    inputs:
      config-file:
        description: 'Path to the lambda deploy configuration file'
        required: false
        type: string
        default: 'lambda-deploy-config.yml'
      environment:
        description: 'Environment to deploy to (dev, pre, prod, or auto)'
        required: false
        type: string
        default: 'auto'
      version:
        description: 'Version to deploy (overrides package.json version)'
        required: false
        type: string
      force-deploy:
        description: 'Force deployment even if version already exists'
        required: false
        type: boolean
        default: false
      rollback-to-version:
        description: 'Version to rollback to (leave empty for normal deployment)'
        required: false
        type: string
      debug:
        description: 'Enable debug output'
        required: false
        type: boolean
        default: false

    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true
      AWS_ROLE_ARN:
        description: 'AWS Role ARN (optional)'
        required: false
      S3_BUCKET_NAME:
        description: 'S3 bucket name for deployment artifacts'
        required: true
      LAMBDA_FUNCTION_NAME:
        description: 'Lambda function name'
        required: true
      AWS_REGION:
        description: 'AWS region'
        required: true
      TEAMS_WEBHOOK_URL:
        description: 'Teams webhook URL for notifications (optional)'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Permissions are inherited from the calling workflow

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Environment Variables (if enabled)
        if: inputs.debug == true
        run: |
          echo "🐛 DEBUG: Reusable workflow inputs and secrets:"
          echo "inputs.config-file: '${{ inputs.config-file }}'"
          echo "inputs.environment: '${{ inputs.environment }}'"
          echo "inputs.version: '${{ inputs.version }}'"
          echo "inputs.force-deploy: '${{ inputs.force-deploy }}'"
          echo "inputs.rollback-to-version: '${{ inputs.rollback-to-version }}'"
          echo "inputs.debug: '${{ inputs.debug }}'"
          echo "secrets.AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID && 'SET' || 'NOT_SET' }}'"
          echo "secrets.AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY && 'SET' || 'NOT_SET' }}'"
          echo "secrets.AWS_ROLE_ARN: '${{ secrets.AWS_ROLE_ARN && 'SET' || 'NOT_SET' }}'"
          echo "secrets.S3_BUCKET_NAME: '${{ secrets.S3_BUCKET_NAME && 'SET' || 'NOT_SET' }}'"
          echo "secrets.LAMBDA_FUNCTION_NAME: '${{ secrets.LAMBDA_FUNCTION_NAME && 'SET' || 'NOT_SET' }}'"
          echo "secrets.AWS_REGION: '${{ secrets.AWS_REGION && 'SET' || 'NOT_SET' }}'"
          echo "secrets.TEAMS_WEBHOOK_URL: '${{ secrets.TEAMS_WEBHOOK_URL && 'SET' || 'NOT_SET' }}'"

      - name: Deploy or Rollback Lambda Function
        uses: jfarcas/lambda-deploy-action/actions/lambda-deploy@main
        env:
          # Required AWS credentials
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
          
          # Required repository variables (passed as secrets)
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          
          # Optional: Teams webhook for notifications
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        with:
          config-file: ${{ inputs.config-file }}
          environment: ${{ inputs.environment }}
          version: ${{ inputs.version }}
          force-deploy: ${{ inputs.force-deploy }}
          rollback-to-version: ${{ inputs.rollback-to-version }}
          debug: ${{ inputs.debug }}

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Reusable Workflow Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** Reusable Lambda Deploy Workflow" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Config File:** ${{ inputs.config-file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ inputs.version }}" ]]; then
            echo "- **Custom Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ inputs.rollback-to-version }}" ]]; then
            echo "- **Action:** Rollback to v${{ inputs.rollback-to-version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Action:** Normal deployment" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ inputs.force-deploy }}" == "true" ]]; then
            echo "- **Force Deploy:** Enabled" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Lambda deployment completed using **Reusable Workflow**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Reusable Workflow Benefits:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Simplified workflow configuration" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pre-configured dynamic run names" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Built-in error handling and logging" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Consistent deployment patterns" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Centralized workflow maintenance" >> $GITHUB_STEP_SUMMARY
