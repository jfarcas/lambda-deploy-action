# Enhanced Version Conflict Check
# This is a proposed improvement to the current version conflict detection

- name: Enhanced Version Conflict Check
  id: version-check
  shell: bash
  run: |
    set -e
    
    ENV="${{ steps.determine-env.outputs.environment }}"
    VERSION="${{ steps.get-version.outputs.version }}"
    S3_BUCKET="${{ env.S3_BUCKET_NAME }}"
    LAMBDA_FUNCTION="${{ env.LAMBDA_FUNCTION_NAME }}"
    FORCE_DEPLOY="${{ inputs.force-deploy }}"
    
    echo "🔍 Enhanced Version Conflict Check"
    echo "Environment: $ENV"
    echo "Version: $VERSION"
    echo "Force Deploy: $FORCE_DEPLOY"
    echo ""
    
    # Check if code files changed in recent commits
    CODE_CHANGED=false
    VERSION_CHANGED=false
    
    # Check if code files changed in last commit
    if git diff --name-only HEAD~1 2>/dev/null | grep -E '\.(py|js|ts|json)$' > /dev/null; then
      CODE_CHANGED=true
      echo "📝 Code files changed in recent commit"
    fi
    
    # Check if version files changed in last commit
    if git diff --name-only HEAD~1 2>/dev/null | grep -E '(pyproject\.toml|package\.json|version\.txt|VERSION|__version__\.py|setup\.py)$' > /dev/null; then
      VERSION_CHANGED=true
      echo "🔢 Version file changed in recent commit"
    fi
    
    # Warn if code changed but version didn't
    if [[ "$CODE_CHANGED" == "true" && "$VERSION_CHANGED" == "false" ]]; then
      echo "::warning::Code files changed but version not updated"
      echo "::warning::Current version: $VERSION"
      
      # Suggest next version
      if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        SUGGESTED_VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1; print}' OFS=.)
        echo "::notice::Suggested patch version: $SUGGESTED_VERSION"
        echo "::notice::Run: echo 'version = \"$SUGGESTED_VERSION\"' > pyproject.toml"
      fi
    fi
    
    # Check if version exists in S3
    VERSION_EXISTS=false
    if aws s3 ls "s3://$S3_BUCKET/$LAMBDA_FUNCTION/versions/$VERSION/" > /dev/null 2>&1; then
      VERSION_EXISTS=true
      echo "⚠️  Version $VERSION already exists in S3"
    else
      echo "✅ Version $VERSION is new"
    fi
    
    # Decision logic based on environment and conditions
    if [[ "$FORCE_DEPLOY" == "true" ]]; then
      echo "🚨 Force deployment enabled - bypassing all version checks"
      echo "::warning::Force deployment will overwrite existing version $VERSION"
      echo "::warning::This may break rollback functionality and audit trails"
      echo "can-deploy=true" >> $GITHUB_OUTPUT
      
    elif [[ "$ENV" == "dev" ]]; then
      if [[ "$VERSION_EXISTS" == "true" ]]; then
        echo "🔄 Dev environment: Allowing version overwrite"
        echo "::warning::Overwriting version $VERSION in dev environment"
        if [[ "$CODE_CHANGED" == "true" && "$VERSION_CHANGED" == "false" ]]; then
          echo "::warning::Consider incrementing version for better tracking"
        fi
      else
        echo "✅ Dev environment: Deploying new version"
      fi
      echo "can-deploy=true" >> $GITHUB_OUTPUT
      
    else
      # Production/staging environments
      if [[ "$VERSION_EXISTS" == "true" ]]; then
        echo "❌ Version conflict in $ENV environment"
        echo "::error::Version $VERSION already exists"
        echo "::error::Options:"
        echo "::error::  1. Increment version (recommended)"
        echo "::error::  2. Use force-deploy: true (risky)"
        
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          SUGGESTED_VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1; print}' OFS=.)
          echo "::error::  Suggested: echo 'version = \"$SUGGESTED_VERSION\"' > pyproject.toml"
        fi
        
        echo "can-deploy=false" >> $GITHUB_OUTPUT
        exit 1
      else
        echo "✅ No version conflicts detected in $ENV environment"
        echo "can-deploy=true" >> $GITHUB_OUTPUT
      fi
    fi
    
    # Store deployment metadata for audit trail
    echo "📊 Storing deployment metadata"
    DEPLOY_METADATA="{
      \"version\": \"$VERSION\",
      \"environment\": \"$ENV\",
      \"commit\": \"$(git rev-parse HEAD)\",
      \"commit_short\": \"$(git rev-parse --short HEAD)\",
      \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
      \"force_deploy\": \"$FORCE_DEPLOY\",
      \"version_exists\": \"$VERSION_EXISTS\",
      \"code_changed\": \"$CODE_CHANGED\",
      \"version_changed\": \"$VERSION_CHANGED\",
      \"branch\": \"$(git rev-parse --abbrev-ref HEAD)\",
      \"author\": \"$(git log -1 --format='%an <%ae>')\",
      \"message\": \"$(git log -1 --format='%s')\"
    }"
    
    echo "$DEPLOY_METADATA" > deployment-metadata.json
    echo "deployment-metadata=$DEPLOY_METADATA" >> $GITHUB_OUTPUT
    
    echo ""
    echo "🎯 Version conflict check completed"

# Additional step to upload deployment metadata
- name: Store Deployment Metadata
  if: steps.version-check.outputs.can-deploy == 'true'
  shell: bash
  run: |
    set -e
    
    S3_BUCKET="${{ env.S3_BUCKET_NAME }}"
    LAMBDA_FUNCTION="${{ env.LAMBDA_FUNCTION_NAME }}"
    VERSION="${{ steps.get-version.outputs.version }}"
    TIMESTAMP=$(date +%s)
    
    # Upload deployment metadata for audit trail
    METADATA_KEY="$LAMBDA_FUNCTION/deployments/$VERSION-$TIMESTAMP-$(git rev-parse --short HEAD).json"
    
    if aws s3 cp deployment-metadata.json "s3://$S3_BUCKET/$METADATA_KEY"; then
      echo "📊 Deployment metadata stored: s3://$S3_BUCKET/$METADATA_KEY"
    else
      echo "::warning::Failed to store deployment metadata (non-critical)"
    fi
