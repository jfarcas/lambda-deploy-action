# Improved Version Conflict Check with Pre Environment Support
# This addresses the pre environment issues identified in the analysis

- name: Improved Version Conflict Check
  id: version-check
  shell: bash
  run: |
    set -e
    
    ENV="${{ steps.determine-env.outputs.environment }}"
    VERSION="${{ steps.get-version.outputs.version }}"
    S3_BUCKET="${{ env.S3_BUCKET_NAME }}"
    LAMBDA_FUNCTION="${{ env.LAMBDA_FUNCTION_NAME }}"
    FORCE_DEPLOY="${{ inputs.force-deploy }}"
    
    echo "üîç Improved Version Conflict Check"
    echo "Environment: $ENV"
    echo "Version: $VERSION"
    echo "Force Deploy: $FORCE_DEPLOY"
    echo ""
    
    # Check if version exists in S3
    VERSION_EXISTS=false
    if aws s3 ls "s3://$S3_BUCKET/$LAMBDA_FUNCTION/versions/$VERSION/" > /dev/null 2>&1; then
      VERSION_EXISTS=true
      echo "üì¶ Version $VERSION already exists in S3"
    else
      echo "‚ú® Version $VERSION is new"
    fi
    
    # Environment-specific version conflict handling
    case "$ENV" in
      "dev"|"development")
        echo "üîß Development Environment Policy:"
        if [[ "$VERSION_EXISTS" == "true" ]]; then
          echo "::warning::Overwriting version $VERSION in development environment"
          echo "::notice::This is normal for development iteration"
        fi
        echo "‚úÖ Development: Always allow deployment"
        echo "can-deploy=true" >> $GITHUB_OUTPUT
        ;;
        
      "pre"|"staging"|"test")
        echo "üß™ Staging Environment Policy:"
        if [[ "$FORCE_DEPLOY" == "true" ]]; then
          echo "üö® Force deployment enabled - bypassing version checks"
          echo "::warning::Force deployment in staging environment"
          echo "can-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "$VERSION_EXISTS" == "true" ]]; then
          # Check if this is a pre-release version
          if [[ "$VERSION" =~ -rc\.|pre\.|staging\.|alpha\.|beta\. ]]; then
            echo "üîÑ Pre-release version detected: $VERSION"
            echo "::warning::Overwriting pre-release version $VERSION in staging"
            echo "::notice::Pre-release versions can be safely overwritten in staging"
            echo "can-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Production version $VERSION already exists in staging"
            echo "::warning::Overwriting production version $VERSION in staging environment"
            echo "::notice::Consider using pre-release versions for staging:"
            echo "::notice::  - $VERSION-rc.1 (release candidate)"
            echo "::notice::  - $VERSION-pre.1 (pre-release)"
            echo "::notice::  - $VERSION-staging.1 (staging version)"
            echo "::notice::Or use force-deploy: true to override"
            
            # Allow deployment but with strong warnings
            echo "‚úÖ Staging: Allowing deployment with warnings"
            echo "can-deploy=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚úÖ Staging: New version deployment"
          echo "can-deploy=true" >> $GITHUB_OUTPUT
        fi
        ;;
        
      "prod"|"production")
        echo "üè≠ Production Environment Policy:"
        if [[ "$FORCE_DEPLOY" == "true" ]]; then
          echo "üö® Force deployment enabled in PRODUCTION"
          echo "::warning::Force deployment bypasses all safety checks in production"
          echo "::warning::This should only be used for emergency hotfixes"
          echo "::warning::Ensure proper change management approval"
          echo "can-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "$VERSION_EXISTS" == "true" ]]; then
          echo "‚ùå Production version conflict detected"
          echo "::error::Version $VERSION already exists in production"
          echo "::error::Production deployments require unique versions"
          echo "::error::Resolution options:"
          echo "::error::  1. Increment version (recommended):"
          
          # Suggest next version if it's semantic versioning
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            SUGGESTED_PATCH=$(echo $VERSION | awk -F. '{$NF = $NF + 1; print}' OFS=.)
            SUGGESTED_MINOR=$(echo $VERSION | awk -F. '{$(NF-1) = $(NF-1) + 1; $NF = 0; print}' OFS=.)
            echo "::error::     Patch: $SUGGESTED_PATCH (for bug fixes)"
            echo "::error::     Minor: $SUGGESTED_MINOR (for new features)"
          fi
          
          echo "::error::  2. Use force-deploy: true (emergency only)"
          echo "::error::  3. Review deployment history and version management"
          echo "can-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ Production: New version deployment"
          echo "can-deploy=true" >> $GITHUB_OUTPUT
        fi
        ;;
        
      *)
        echo "ü§î Unknown Environment: $ENV"
        echo "::warning::Unknown environment '$ENV', applying production-level policies"
        if [[ "$FORCE_DEPLOY" == "true" ]]; then
          echo "can-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "$VERSION_EXISTS" == "true" ]]; then
          echo "::error::Version conflict in unknown environment '$ENV'"
          echo "can-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "can-deploy=true" >> $GITHUB_OUTPUT
        fi
        ;;
    esac
    
    # Store deployment decision metadata
    DEPLOYMENT_DECISION="{
      \"environment\": \"$ENV\",
      \"version\": \"$VERSION\",
      \"version_exists\": \"$VERSION_EXISTS\",
      \"force_deploy\": \"$FORCE_DEPLOY\",
      \"can_deploy\": \"$(cat $GITHUB_OUTPUT | grep can-deploy | cut -d= -f2)\",
      \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
      \"commit\": \"$(git rev-parse HEAD)\",
      \"branch\": \"$(git rev-parse --abbrev-ref HEAD)\"
    }"
    
    echo "deployment-decision=$DEPLOYMENT_DECISION" >> $GITHUB_OUTPUT
    echo ""
    echo "üéØ Version conflict check completed for $ENV environment"

# Additional step for pre-release version suggestions
- name: Pre-Release Version Guidance
  if: steps.version-check.outputs.can-deploy == 'true'
  shell: bash
  run: |
    set -e
    
    ENV="${{ steps.determine-env.outputs.environment }}"
    VERSION="${{ steps.get-version.outputs.version }}"
    
    # Provide guidance for staging environments
    if [[ "$ENV" == "pre" || "$ENV" == "staging" || "$ENV" == "test" ]]; then
      echo "üí° Staging Environment Best Practices:"
      echo ""
      
      # Check if current version is already a pre-release
      if [[ "$VERSION" =~ -rc\.|pre\.|staging\.|alpha\.|beta\. ]]; then
        echo "‚úÖ Using pre-release version: $VERSION"
        echo "   This is the recommended approach for staging environments"
      else
        echo "üí≠ Consider using pre-release versions for staging:"
        echo "   Current: $VERSION"
        echo "   Suggested alternatives:"
        echo "     - $VERSION-rc.1     (release candidate 1)"
        echo "     - $VERSION-pre.1    (pre-release 1)"
        echo "     - $VERSION-staging.1 (staging version 1)"
        echo ""
        echo "   Benefits of pre-release versions:"
        echo "     ‚úÖ Clear distinction from production versions"
        echo "     ‚úÖ Can increment for multiple staging iterations"
        echo "     ‚úÖ Follows semantic versioning standards"
        echo "     ‚úÖ Better release management and tracking"
        echo ""
        echo "   Example workflow:"
        echo "     1. Deploy 1.0.0-rc.1 to staging"
        echo "     2. Fix bugs, deploy 1.0.0-rc.2 to staging"
        echo "     3. Deploy 1.0.0 to production"
      fi
    fi

# Environment policy documentation step
- name: Document Environment Policies
  shell: bash
  run: |
    echo "üìã Environment-Specific Version Policies:"
    echo ""
    echo "üîß Development (dev):"
    echo "   - Always allows deployment"
    echo "   - Overwrites existing versions"
    echo "   - Good for rapid iteration"
    echo ""
    echo "üß™ Staging (pre/staging/test):"
    echo "   - Allows version overwrites with warnings"
    echo "   - Encourages pre-release versions"
    echo "   - Flexible for testing workflows"
    echo ""
    echo "üè≠ Production (prod):"
    echo "   - Strict version conflict checking"
    echo "   - Requires unique versions"
    echo "   - Force deploy only for emergencies"
    echo ""
    echo "üéØ This provides the right balance of flexibility and safety"
